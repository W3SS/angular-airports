package com.chrisali.loaders;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Profile;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;

import com.chrisali.model.airportinfo.Airport;
import com.chrisali.model.user.BaseUser;
import com.chrisali.model.user.Review;
import com.chrisali.model.user.Role;
import com.chrisali.model.user.RoleType;
import com.chrisali.model.user.User;
import com.chrisali.repositories.airportinfo.AirportRepository;
import com.chrisali.repositories.user.ReviewRepository;
import com.chrisali.repositories.user.RoleRepository;
import com.chrisali.repositories.user.UserRepository;

@Component
@Profile("test")
public class TestDataLoader implements ApplicationListener<ContextRefreshedEvent>, Ordered {

	@Override
	public int getOrder() { return 1; }

	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private RoleRepository roleRepository;
	
	@Autowired
	private AirportRepository airportRepository;
	
	@Autowired
	private ReviewRepository reviewRepository;
	
	private static Logger logger = LogManager.getLogger(TestDataLoader.class);

	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		Set<Role> roles = loadRoles();
		
		List<User> users = loadTestUsers(roles);
		
		loadTestReviews(users);
	}
	
	/**
	 * Creates and returns a set of roles that a user can have
	 * 
	 * @return
	 */
	private Set<Role> loadRoles() {
		Set<Role> roles = new HashSet<Role>();
		
		logger.info("Creating user roles");
		
		for (RoleType roleType : RoleType.values()) {
			try {			
				Role role = new Role(roleType.toString().toLowerCase()); 
				roleRepository.save(role);
				roles.add(role);
				
			} catch (Exception e) {
				logger.error("Error creating " + roleType.toString().toLowerCase() + " role!", e);
				
				continue;
			}
		}
		
		return roles;
	}
	
	/**
	 * Adds test users, each having a separate and different role
	 * 
	 * @param userRoles
	 */
	private List<User> loadTestUsers(Set<Role> userRoles) {
		List<User> users = new ArrayList<>();
		
		for (Role role : userRoles) {
			try {
				User user = new User();
				user.setEnabled(true);
				user.setUsername(role.getName() + "@test.com");
				user.setPassword("t3st123!");
				user.setRoles(new HashSet<Role>(Collections.unmodifiableList(Arrays.asList(role))));
						
				logger.info("Adding test " + role.getName() + " user");
				
				userRepository.save(user);
				users.add(user);
			} catch (Exception e) {
				logger.error("Error adding user", e);
				continue;
			}
		}
		
		return users;
	}
	
	/**
	 * Adds reviews to each test user in a list generated by loadTestUsers()
	 * 
	 * @param users
	 * @return total list of reviews 
	 */
	private List<Review> loadTestReviews(List<User> users) {
		List<Review> reviews = new ArrayList<>();
		
		for (BaseUser user : users) {
			logger.info("Adding test reviews for user: " + user.getUsername());
			
			loadReviewsForUser(reviews, user);
		}
		
		return reviews;	
	}
	
	/**
	 * Adds 5 (for now) test reviews for a single user
	 * 
	 * @param reviews
	 * @param user
	 * @return a list of test reviews for a single user
	 */
	private List<Review> loadReviewsForUser(List<Review> reviews, BaseUser user) {
		int created = 0;
		
		for (long i = 1L; i < 6L; i++) {
			try {
				Review review = new Review(getOrCreateAirport(i));
				review.setUser(user);
				review.setRating(3);
				review.setDatePosted(new Date());
				review.setText("This is a test review for " + user.getUsername() + " at " + review.getAirport().getAirportName());
			
				reviewRepository.save(review);
				reviews.add(review);
				
				created++;
			} catch (Exception e) {
				logger.error("Error adding review for user: " + user.getUsername() + "!", e);
				continue;
			}
		}
		
		logger.info(created + " test reviews created");
		
		return reviews;
	}
	
	/**
	 * Tries to use {@link AirportRepository} to get an airport based on ID. If unable, creates a dummy airport for test purposes 
	 * 
	 * @param id
	 * @return airport
	 */
	private Airport getOrCreateAirport(long id) {
		Airport airport = airportRepository.findOne(id);
		
		if (airport == null) {
			try {
				logger.warn("Unable to get an airport with id " + id + " from the database! Attempting to create a dummy airport...");
				
				airport = new Airport();
				airport.setAirportName("Test Airport");
				airport.setIcaoCode("TEST");
				airport.setIataCode("TST");
				
				airportRepository.save(airport);
				logger.warn("...done");
			} catch (Exception e) {
				logger.error("Unable to create dummy airport!");
				return null;
			}
		}
		
		return airport;
	}
}
